# Simulateurs de courses

√Ä vos marques, pr√™ts, partez üö¶üö¶üö¶! En utilisant les structures et le reste de vos connaissances en C, nous allons cr√©er un simulateur de course.

Tout d'abord, nous allons d√©finir nos types de donn√©es complexes √† l'aide de structures. Ensuite, nous cr√©erons quelques fonctions d'impression amusantes pour aider √† mettre √† jour notre public. Enfin, nous impl√©menterons des fonctions pour aider √† la logique de la course et nous lancerons notre course !

1. Nous allons commencer par cr√©er nos types de donn√©es pour la course.
Dans la section structures, cr√©ez une structure `Race` qui poss√®de les variables membres suivantes :
    1. un int - `numberOfLaps`
    2. un int - `currentLap`
    3. une cha√Æne de caract√®res - `firstPlaceDriverName`
    4. une cha√Æne de caract√®res - `firstPlaceRaceCarColor`
2. Ensuite, dans la section structures, cr√©ez une structure `RaceCar` qui a les variables membres suivantes :
    1. a string - `driverName`
    2. une cha√Æne - `raceCarColor`
    3. un nombre entier - `totalLapTime`
3. Puisque chaque course a besoin d'une introduction amusante, cr√©ons-en une. 
    
    Dans la section `‚ÄúPrint function section‚Äù`, cr√©ez la fonction `printIntro()` qui imprime un message d'introduction amusant pour la course sur la console. Par exemple :
    

```c
Bienvenue √† notre √©v√©nement principal, les fans de course num√©rique !
J'esp√®re que tout le monde a pris son go√ªter car nous allons commencer !
```

Allez-y et appelez `printIntro()` depuis `main()` pour voir sa sortie dans la console.

1. Outre une introduction, une course a toujours un compte √† rebours !
    
    Dans la section des fonctions d'impression, cr√©ez la fonction `printCountDown()` qui imprime un message amusant de compte √† rebours pour nos coureurs.
    
    Par exemple :
    
    ```c
    Coureurs pr√™ts ! Dans...
    5
    4
    3
    2
    1
    Course !
    ```
    

Allez-y et appelez `printCountDown()` depuis la fonction `main()` pour voir son r√©sultat.

1. Une fois la course lanc√©e, nous devons √™tre en mesure d'indiquer au public qui est en t√™te apr√®s chaque tour.
    
    Dans la section des fonctions d'impression, cr√©ez la fonction `printFirstPlaceAfterLap()` qui poss√®de un seul param√®tre de type `Race` nomm√© `race`.
    
    La fonction doit acc√©der aux variables membres de race et imprimer un message annon√ßant le `tour en cours`, le `nom du pilote en t√™te` et `la couleur de la voiture` de course qu'il conduit.
    
    Par exemple :
    
    ```c
    Apr√®s le tour num√©ro 2
    La premi√®re place est occup√©e par : Youssef dans la voiture de course jaune !
    ```
    
2. Lorsque la course se termine, nous devons f√©liciter le gagnant et dire au public que la course est termin√©e.
    
    Dans la section des fonctions d'impression, cr√©ez la fonction `printCongratulation()` qui poss√®de un param√®tre de type `Race` nomm√© `race`.
    
    La fonction doit acc√©der aux variables membres de race et afficher un message de f√©licitations avec le `nom du pilote` et `la couleur de la voiture` de course qu'il conduisait.
    
    Par exemple :
    
    ```c
    F√©licitons tous Ahmed, dans la voiture de course orange, pour son incroyable performance.
    C'√©tait vraiment une belle course et bonne nuit √† tous !
    ```
    
3. Pour que notre course soit passionnante, nous avons besoin d'un moyen de calculer le temps que met une voiture de course pour effectuer un tour.
    
    Dans la section des fonctions logiques, sous la section des fonctions d'impression, cr√©ez la fonction `calculateTimeToCompleteLap()` qui n'a pas de param√®tres et renvoie un type `int`.
    
    Dans la fonction, d√©clarez 3 variables `int` :
    
    - `vitesse`
    - `acceleration`
    - `nerves`
    
    Initialisez chacune √† un nombre al√©atoire entre 1 et 3. (utilisez la fonction rand()).
    
    retourner la somme des trois variables.
    
4. Maintenant que nous savons combien de temps il faut √† une voiture de course pour terminer un tour, nous devons √™tre en mesure de conna√Ætre le temps total de course de la voiture.
    
    Dans les fonctions logiques, cr√©ez la fonction `updateRaceCar()` et, puisque nous devons modifier le temps total du tour pour la voiture de course donn√©e, assurez-vous qu'elle a un seul param√®tre de pointeur `RaceCar` nomm√© `raceCar` et qu'elle n'a pas de sortie.
    
    Cette fonction doit trouver le temps qu'il a fallu √† la `raceCar` pour effectuer un tour et l'ajouter √† la variable membre `totalLapTime`.
    
5. Finalement, nous devons savoir qui est le nouveau pilote de la premi√®re place et quelle couleur de voiture il conduit.
    
    Dans la section des fonctions logiques, cr√©ez la fonction `updateFirstPlace()` qui a les param√®tres suivants :
    
    - un pointeur de course - `race`
    - un pointeur de voiture de course - `raceCar1`
    - un pointeur de voiture de course - `raceCar2`
    et n'a pas de sortie.
    
    Cette fonction doit d√©finir les variables membres de la course `firstPlaceDriverName` et `firstPlaceRaceCarColor` avec :
    
    - les variables membres `raceCar1 driverName` et `raceCarColor` si son `totalLapTime` est inf√©rieur ou √©gal √† `raceCar2 totalLapTime`
    - les variables membres `raceCar2 driverName` et `raceCarColor`, sinon.

10. Rassemblons toutes nos pi√®ces pour cr√©er notre course num√©rique !

Au-dessus de main(), cr√©ez la fonction `startRace()` qui a 2 param√®tres de pointeur `RaceCar` :

- `raceCar1`
- `raceCar2`

et ne renvoie aucune sortie.

Cette fonction doit initialiser un type de course nomm√© race avec les valeurs de variables membres suivantes :

- 5 - `numberOfLaps`
- 1 - `currentLap`
- "" - `firstPlaceDriverName`
- "" - `firstPlaceRaceCarColor`
1. Ensuite, nous devons √™tre en mesure de simuler tous les tours de la course, o√π, √† chaque tour, le temps de chaque voiture de course est calcul√© et un pilote de premi√®re place et la couleur de sa voiture de course sont annonc√©s.
    
    Dans `startRace()`, cr√©ez une boucle for qui boucle le `numberOfLaps` dans `Race`.
    
    A l'int√©rieur de la boucle :
    
    - Met √† jour la variable membre `raceCar1` et `raceCar2 totalLapTime`.
    - Met √† jour les variables membres `Race firstPlaceDriverName` et `firstPlaceRaceCarColor`.
    - Afficher les informations relatives √† la premi√®re place
2. Une fois tous les tours termin√©s, nous devons √™tre en mesure d'annoncer le nom des gagnants et la couleur de leur voiture de course.
    
    Dans `startRace()`, apr√®s la boucle for, imprimez un message de f√©licitations.
    
3. Maintenant que la logique de course est compl√®te, nous pouvons travailler sur le point d'entr√©e de la simulation de course.
    
    Dans `main()`, d√©clarez et initialisez 2 types de donn√©es `RaceCar`.
    
    Ensuite, imprimez un message d'introduction et commencez le compte √† rebours.
    
    Enfin, appelez `startRace()` avec des pointeurs vers les types de `RaceCar` que vous avez cr√©√©s.
    
    Profitez de la course !